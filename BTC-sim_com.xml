<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>const int KEYS_NUM = 2;
const int SECRETS_NUM = 4;
const int NSS_NUM = 4; //NON_STANDARD_SCRIPTS
const int PARTIES_NUM = 2;
const int PROT_TX_NUM = 18;
const int NONCE_NUM = 1;
const int TX_NUM = 2 * PROT_TX_NUM;
const int KNOWN_SIGNATURES_SIZE = 3;
const int A_KEY = 0;
const int B_KEY = 1;
const int SA_SEC = 0;
const int SB_SEC = 1;
const int RA_SEC = 2;
const int RB_SEC = 3;
const int MAX_LATENCY = 10;
const int TIMERS_NUM = 1;
const int PROT_TIMELOCK = 100;
clock time;
int timer_t[TIMERS_NUM] = {0};
bool timer_passed[TIMERS_NUM];

typedef int[0,KEYS_NUM-1] Key;
typedef int[0,SECRETS_NUM-1] Secret;
typedef int[0,NSS_NUM-1] Nss;
typedef int[0,PARTIES_NUM-1] PartyId;
typedef int[0,TX_NUM-1] TxId;
typedef int[0,NONCE_NUM-1] Nonce;
typedef int[0,TIMERS_NUM-1] Timer;
typedef int[0,4] Status;

const Status UNSENT = 0;
const Status SENT = 1;
const Status CONFIRMED = 2;
const Status SPENT = 3;
const Status CANCELED = 4;

const PartyId ALICE = 0;
const PartyId BOB = 1;

typedef struct {
	Key key;
	TxId tx_num;
	Nonce input_nonce;
} Signature;

typedef struct {
    bool standard;
    Key key;
    Nss script;
} OutputScript;

typedef struct {
	TxId num;
	TxId input;
	Status status;
	OutputScript out_script;
	int value;
	int timelock;
	bool timelock_passed;
	Nonce nonce;
	bool reveals_secret;
	Secret secret_revealed;
	TxId second_output;
} Tx;

Tx bc[TX_NUM];
clock bc_clock[TX_NUM];
urgent chan urg_chan;

typedef struct {
	bool know_key[KEYS_NUM];
	bool know_secret[SECRETS_NUM];
	int[0,KNOWN_SIGNATURES_SIZE] known_signatures_size;
	Signature known_signatures[KNOWN_SIGNATURES_SIZE];
} Party;

Party parties[PARTIES_NUM];

Signature create_signature_(Key key, TxId tx_num, Nonce input_nonce) {
	Signature res = {key, tx_num, input_nonce};
	return res;
}

Signature create_signature(Key key, Tx t) {
	return create_signature_(key, t.num, bc[t.input].nonce);
}

void join(Tx&amp; a, Tx&amp; b) {
	a.second_output = b.num;
	b.second_output = a.num;
}

bool has_signature(Party p, Signature s) {
	int i;
	if(p.know_key[s.key]) return true;
	for(i = 0; i &lt; p.known_signatures_size; i++) {
		Signature ss = p.known_signatures[i];
		if(s == ss) return true;
	}
	return false;
}

void add_signature(Party&amp; p, Signature s) {
	if(not has_signature(p, s))
		p.known_signatures[p.known_signatures_size++] = s;
}

void broadcast_signature(Signature s) {
	for(i : PartyId)
		add_signature(parties[i], s);
}

OutputScript create_standard_output_script(Key key) {
	OutputScript res = {true, key, 0};
	return res;
}

OutputScript create_nss(Nss nss) {
	OutputScript res = {false, 0, nss};
	return res;
}

Tx create_standard_tx(TxId num, TxId input, Key recipient) {
	Tx res;
	Tx in = bc[input];
	res.num = num;
	res.input = input;
	res.value = in.value;
	res.out_script = create_standard_output_script(recipient);
	return res;
}

bool was_malled(Tx t) {
	return t.nonce != 0;
}

bool is_waiting(Tx t) {
	return t.status == SENT;
}

bool is_valid_(Tx t) {
	return t.timelock_passed and bc[t.input].status == CONFIRMED;
}

bool is_valid(Tx t) {
	return is_valid_(t) and (t.second_output == 0 or is_valid_(bc[t.second_output]));
}

bool is_confirmed(Tx t) {
	return t.status == CONFIRMED or t.status == SPENT;
}

void confirm_(Tx&amp; t, Nonce n) {
	t.status = CONFIRMED;
	t.nonce = n;
	bc[t.input].status = SPENT;
}

void confirm(Tx&amp; t, Nonce n) {
	confirm_(t, n);
	if(t.second_output &gt; 0) confirm_(bc[t.second_output], n);
}

void cancel_(Tx&amp; t) {
	t.status = CANCELED;
}

void cancel(Tx&amp; t) {
	cancel_(t);
	if(t.second_output &gt; 0) cancel_(bc[t.second_output]);
}

void try_to_confirm(Tx&amp; t, Nonce n) {
	if(is_valid(t))
		confirm(t, n);
	else
		cancel(t);
}

void send_(Tx&amp; t) {
	t.status = SENT;
	bc_clock[t.num] = 0;
	if(t.reveals_secret)
		for(i : PartyId)
			parties[i].know_secret[t.secret_revealed] = true;
}

void send(Tx&amp; t) {
	send_(t);
	if(t.second_output &gt; 0) send_(bc[t.second_output]);
}

bool know_signature(Party p, Tx t, Key key) {
	int i;
	if(p.know_key[key]) return true;
	for(i = 0; i &lt; p.known_signatures_size; i++) {
		Signature s = p.known_signatures[i];
		if(s.tx_num == t.num and s.input_nonce == bc[t.input].nonce &amp;&amp; s.key == key)
			return true;
	}
	return false;
}

bool can_create_input_script_(Party p, Tx t) {
	OutputScript o = bc[t.input].out_script;
	if(t.reveals_secret and !p.know_secret[t.secret_revealed]) return false;
	if(o.standard) return know_signature(p, t, o.key);
	// PROTOCOL DEPENDENT SECTION
	if(o.script == 0) return (know_signature(p, t, A_KEY) and t.reveals_secret and t.secret_revealed == RA_SEC) or
                                 (know_signature(p, t, A_KEY) and know_signature(p, t, B_KEY));
	if(o.script == 1) return (know_signature(p, t, B_KEY) and t.reveals_secret and t.secret_revealed == RB_SEC) or
                                 (know_signature(p, t, A_KEY) and know_signature(p, t, B_KEY));
	if(o.script == 2) return (know_signature(p, t, A_KEY) and t.reveals_secret and t.secret_revealed == SA_SEC) or
                                 (know_signature(p, t, B_KEY) and t.reveals_secret and t.secret_revealed == RA_SEC);
	if(o.script == 3) return (know_signature(p, t, B_KEY) and t.reveals_secret and t.secret_revealed == SB_SEC) or
                                 (know_signature(p, t, A_KEY) and t.reveals_secret and t.secret_revealed == RB_SEC);
	// PROTOCOL DEPENDENT SECTION
	return false;
}

bool can_create_input_script(Party p, Tx t) {
	return can_create_input_script_(p,t) and (t.second_output == 0 or can_create_input_script_(p,bc[t.second_output]));
}

bool can_send_(Party p, Tx t) {
	return t.status == UNSENT and is_valid(t) and can_create_input_script_(p, t);
}

bool can_send(Party p, Tx t) {
	return can_send_(p,t) and (t.second_output == 0 or can_send_(p,bc[t.second_output]));
}

void try_to_send(Party p, Tx&amp; t) {
	if(can_send(p, t))
		send(t);
}

bool own(Party p, Tx t) {
	OutputScript out = t.out_script;
	return t.status == CONFIRMED and out.standard and p.know_key[out.key];
}

int count_owners(Tx t) {
	int res = 0;
	for(i : PartyId)
		if(own(parties[i], t))
			res++;
	return res;
}

int hold_bitcoins(Party p) {
	int res = 0;
	for(i : TxId)
		if(own(p, bc[i]) and count_owners(bc[i]) == 1)
			res += bc[i].value;
	return res;
}

// PROTOCOL DEPENDENT SECTION
const int ADV_KEY = B_KEY;

const TxId CA_INPUT = 0;
const TxId CA_COMMIT = 1;
const TxId CA_OPEN = 2;
const TxId CA_FUSE = 3;
const TxId INPUT_A = 4;
const TxId COMMIT_A = 5;
const TxId OPEN_A = 6;
const TxId FUSE_A = 7;
const TxId QUIT_A = 8;
const TxId CB_INPUT = 9;
const TxId CB_COMMIT = 10;
const TxId CB_OPEN = 11;
const TxId CB_FUSE = 12;
const TxId INPUT_B = 13;
const TxId COMMIT_B = 14;
const TxId OPEN_B = 15;
const TxId FUSE_B = 16;
const TxId QUIT_B = 17;

const int QUIT_TIME = PROT_TIMELOCK - 3*MAX_LATENCY;
urgent chan send_sig;

Tx create_prot_tx(TxId num) {
	Tx res;
	//CA
	if(num == CA_INPUT)  { res = create_standard_tx(num, CA_INPUT,   A_KEY); res.value = 1; res.status = CONFIRMED; }
	if(num == CA_COMMIT) { res = create_standard_tx(num, CA_INPUT,   A_KEY); res.out_script = create_nss(0); }
	if(num == CA_OPEN)   { res = create_standard_tx(num, CA_COMMIT,  A_KEY); res.reveals_secret = true; res.secret_revealed = RA_SEC;}
	if(num == CA_FUSE)   { res = create_standard_tx(num, CA_COMMIT,  B_KEY); res.timelock = PROT_TIMELOCK; }
	//CB
	if(num == CB_INPUT)  { res = create_standard_tx(num, CB_INPUT,  B_KEY); res.value = 1; res.status = CONFIRMED; }
	if(num == CB_COMMIT) { res = create_standard_tx(num, CB_INPUT,  B_KEY); res.out_script = create_nss(1); }
	if(num == CB_OPEN)   { res = create_standard_tx(num, CB_COMMIT, B_KEY); res.reveals_secret = true; res.secret_revealed = RB_SEC; }
	if(num == CB_FUSE)   { res = create_standard_tx(num, CB_COMMIT, A_KEY); res.timelock = PROT_TIMELOCK; }
	//A
	if(num == INPUT_A)   { res = create_standard_tx(num, INPUT_A,   A_KEY); res.value = 1; res.status = CONFIRMED; }
	if(num == COMMIT_A)  { res = create_standard_tx(num, INPUT_A,   A_KEY); res.out_script = create_nss(2); res.second_output = COMMIT_B; }
	if(num == OPEN_A)    { res = create_standard_tx(num, COMMIT_A,  A_KEY); res.reveals_secret = true; res.secret_revealed = SA_SEC; }
	if(num == FUSE_A)    { res = create_standard_tx(num, COMMIT_A,  B_KEY); res.reveals_secret = true; res.secret_revealed = RA_SEC; }
	//B
	if(num == INPUT_B)   { res = create_standard_tx(num, INPUT_B,   B_KEY); res.value = 1; res.status = CONFIRMED; }
	if(num == COMMIT_B)  { res = create_standard_tx(num, INPUT_B,   B_KEY); res.out_script = create_nss(3); res.second_output = COMMIT_A; }
	if(num == OPEN_B)    { res = create_standard_tx(num, COMMIT_B,  B_KEY); res.reveals_secret = true; res.secret_revealed = SB_SEC; }
	if(num == FUSE_B)    { res = create_standard_tx(num, COMMIT_B,  A_KEY); res.reveals_secret = true; res.secret_revealed = RB_SEC; }
	// other
	if(num == QUIT_A)    { res = create_standard_tx(num, INPUT_A,  A_KEY); }
	if(num == QUIT_B)    { res = create_standard_tx(num, INPUT_B,  B_KEY); }
	return res;
}

void init_prot() {
	parties[ALICE].know_key[A_KEY] = true;
	parties[ALICE].know_secret[RA_SEC] = true;
	parties[ALICE].know_secret[SA_SEC] = true;
	parties[BOB].know_key[B_KEY] = true;
	parties[BOB].know_secret[RB_SEC] = true;
	parties[BOB].know_secret[SB_SEC] = true;
}

// PROTOCOL DEPENDENT SECTION

void init_bc() {
	int i;
	for(i : TxId) {
		if(i &lt; PROT_TX_NUM)
			bc[i] = create_prot_tx(i);
		else
			bc[i] = create_standard_tx(i, i - PROT_TX_NUM, ADV_KEY);
		if(bc[i].timelock == 0)
			bc[i].timelock_passed = true;
	} 
}</declaration><template><name x="5" y="5">BlockChain</name><declaration>// Place local declarations here.
</declaration><location id="id0" x="-416" y="-64"><committed/></location><location id="id1" x="120" y="-64"><label kind="invariant" x="-360" y="-32">forall(i : TxId) (is_waiting(bc[i]) imply bc_clock[i] &lt; MAX_LATENCY)
and
forall(i : TxId) ((not bc[i].timelock_passed) imply time &lt;= bc[i].timelock)</label></location><init ref="id0"/><transition><source ref="id1"/><target ref="id1"/><label kind="select" x="-24" y="-152">i : TxId</label><label kind="guard" x="-48" y="-288">time == bc[i].timelock and (not bc[i].timelock_passed)</label><label kind="assignment" x="200" y="-136">bc[i].timelock_passed = true</label><nail x="-56" y="-264"/><nail x="304" y="-264"/></transition><transition><source ref="id0"/><target ref="id1"/><label kind="assignment" x="-272" y="-88">init_bc()</label></transition><transition><source ref="id1"/><target ref="id1"/><label kind="select" x="248" y="32">i : TxId, n : Nonce</label><label kind="guard" x="80" y="112">is_waiting(bc[i])</label><label kind="assignment" x="-168" y="48">try_to_confirm(bc[i], n)</label><nail x="320" y="136"/><nail x="-48" y="136"/></transition></template><template><name>P</name><parameter>Party&amp; me, Key key, int my, int opp</parameter><location id="id2" x="-1024" y="360"></location><location id="id3" x="-1544" y="192"></location><location id="id4" x="-1544" y="360"></location><location id="id5" x="-1216" y="360"></location><location id="id6" x="-1032" y="192"></location><location id="id7" x="-776" y="360"></location><location id="id8" x="-456" y="360"><label kind="invariant" x="-552" y="376">time &lt;= QUIT_TIME</label></location><location id="id9" x="-536" y="136"><label kind="invariant" x="-616" y="104">time &lt;= QUIT_TIME</label></location><location id="id10" x="-368" y="136"></location><location id="id11" x="-456" y="32"><label kind="invariant" x="-608" y="-8">time &lt;= QUIT_TIME</label><urgent/></location><location id="id12" x="-456" y="-176"><label kind="invariant" x="-440" y="-184">time &lt;= QUIT_TIME</label></location><location id="id13" x="-776" y="192"></location><location id="id14" x="-776" y="32"></location><location id="id15" x="-776" y="-176"><label kind="invariant" x="-840" y="-208">time &lt;= QUIT_TIME</label></location><location id="id16" x="-1112" y="-176"><label kind="invariant" x="-1184" y="-208">time &lt;= QUIT_TIME</label></location><location id="id17" x="-1112" y="32"><label kind="invariant" x="-1176" y="0">time &lt;= QUIT_TIME</label></location><location id="id18" x="-1408" y="32"><urgent/></location><init ref="id18"/><transition><source ref="id2"/><target ref="id5"/><label kind="guard" x="-1216" y="376">is_confirmed(bc[OPEN_A+my])</label><label kind="synchronisation" x="-1152" y="392">urg_chan?</label><label kind="assignment" x="-1232" y="320">try_to_send(me, bc[CA_OPEN+my])</label></transition><transition><source ref="id7"/><target ref="id2"/><label kind="synchronisation" x="-936" y="368">urg_chan?</label><label kind="assignment" x="-1016" y="336">try_to_send(me, bc[OPEN_A+my])</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="-1536" y="256">bc[CA_FUSE+opp].status == UNSENT or
bc[CA_FUSE+opp].status == CANCELED</label><label kind="synchronisation" x="-1536" y="288">urg_chan?</label><label kind="assignment" x="-1536" y="232">try_to_send(me, bc[FUSE_A+opp])</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-1504" y="368">bc[CA_FUSE+opp].timelock_passed</label><label kind="synchronisation" x="-1504" y="384">urg_chan?</label><label kind="assignment" x="-1504" y="336">try_to_send(me, bc[CA_FUSE+opp])</label></transition><transition><source ref="id13"/><target ref="id6"/><label kind="guard" x="-1000" y="176">is_confirmed(bc[QUIT_A+my])</label><label kind="synchronisation" x="-960" y="216">urg_chan?</label><label kind="assignment" x="-1040" y="160">try_to_send(me, bc[CA_OPEN+my])</label></transition><transition><source ref="id13"/><target ref="id7"/><label kind="guard" x="-984" y="248">is_confirmed(bc[COMMIT_A])</label><label kind="synchronisation" x="-856" y="264">urg_chan?</label></transition><transition><source ref="id14"/><target ref="id13"/><label kind="synchronisation" x="-856" y="112">urg_chan?</label><label kind="assignment" x="-1016" y="96">try_to_send(me, bc[QUIT_A+my])</label></transition><transition><source ref="id10"/><target ref="id8"/><label kind="synchronisation" x="-384" y="224">urg_chan?</label><label kind="assignment" x="-384" y="208">broadcast_signature(create_signature(A_KEY, bc[COMMIT_A]))</label></transition><transition><source ref="id8"/><target ref="id14"/><label kind="guard" x="-752" y="112">time == QUIT_TIME</label></transition><transition><source ref="id9"/><target ref="id14"/><label kind="guard" x="-728" y="56">time == QUIT_TIME</label></transition><transition><source ref="id8"/><target ref="id7"/><label kind="guard" x="-744" y="336">is_confirmed(bc[COMMIT_A])</label><label kind="synchronisation" x="-720" y="360">urg_chan?</label></transition><transition><source ref="id9"/><target ref="id8"/><label kind="guard" x="-608" y="184">can_send(me, bc[COMMIT_B])</label><label kind="synchronisation" x="-536" y="216">urg_chan?</label><label kind="assignment" x="-576" y="200">send(bc[COMMIT_B])</label></transition><transition><source ref="id11"/><target ref="id9"/><label kind="guard" x="-560" y="64">key == 1</label></transition><transition><source ref="id11"/><target ref="id10"/><label kind="guard" x="-408" y="72">key == 0</label></transition><transition><source ref="id11"/><target ref="id14"/><label kind="guard" x="-688" y="8">time == QUIT_TIME</label></transition><transition><source ref="id12"/><target ref="id14"/><label kind="guard" x="-648" y="-104">time == QUIT_TIME</label></transition><transition><source ref="id12"/><target ref="id11"/><label kind="guard" x="-448" y="-112">can_create_input_script(me, bc[CA_FUSE+opp])</label><label kind="synchronisation" x="-448" y="-96">urg_chan?</label></transition><transition><source ref="id15"/><target ref="id12"/><label kind="guard" x="-688" y="-208">is_confirmed(bc[CA_COMMIT+opp])</label><label kind="synchronisation" x="-656" y="-168">urg_chan?</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="-832" y="-104">time == QUIT_TIME</label></transition><transition><source ref="id16"/><target ref="id14"/><label kind="guard" x="-1032" y="-104">time == QUIT_TIME</label></transition><transition><source ref="id17"/><target ref="id14"/><label kind="guard" x="-1000" y="16">time == QUIT_TIME</label></transition><transition><source ref="id16"/><target ref="id15"/><label kind="synchronisation" x="-976" y="-168">urg_chan?</label><label kind="assignment" x="-1192" y="-224">broadcast_signature(create_signature(key, bc[CA_FUSE+my]))</label></transition><transition><source ref="id17"/><target ref="id16"/><label kind="guard" x="-1368" y="-88">is_confirmed(bc[CA_COMMIT+my])</label><label kind="synchronisation" x="-1192" y="-72">urg_chan?</label></transition><transition><source ref="id18"/><target ref="id17"/><label kind="assignment" x="-1416" y="48">try_to_send(me, bc[CA_COMMIT+my])</label></transition></template><template><name>Helper</name><location id="id19" x="-216" y="0"><committed/></location><location id="id20" x="0" y="0"><label kind="invariant" x="16" y="0">forall(i : Timer) ((not timer_passed[i]) imply time &lt;= timer_t[i])</label></location><init ref="id19"/><transition><source ref="id19"/><target ref="id20"/><label kind="assignment" x="-160" y="-24">init_prot()</label></transition><transition><source ref="id20"/><target ref="id20"/><label kind="synchronisation" x="-40" y="96">urg_chan!</label><nail x="96" y="88"/><nail x="-88" y="88"/></transition><transition><source ref="id20"/><target ref="id20"/><label kind="select" x="-128" y="-64">i : Timer</label><label kind="guard" x="-152" y="-136">timer_t[i] == time and (not timer_passed[i])</label><label kind="assignment" x="64" y="-64">timer_passed[i] = true</label><nail x="-104" y="-112"/><nail x="104" y="-112"/></transition></template><template><name>Adversary</name><parameter>Party&amp; me</parameter><location id="id21" x="-224" y="0"></location><init ref="id21"/><transition><source ref="id21"/><target ref="id21"/><label kind="guard" x="-448" y="128">me.know_key[A_KEY]</label><label kind="assignment" x="-736" y="48">broadcast_signature(create_signature(A_KEY, bc[COMMIT_A]))</label><nail x="-224" y="112"/><nail x="-352" y="112"/></transition><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-224" y="-112">i : int[0,1]</label><label kind="guard" x="-480" y="-160">me.know_key[i] and
bc[CA_COMMIT+9*i].status == CONFIRMED</label><label kind="assignment" x="-752" y="-80">broadcast_signature(create_signature(i, bc[CA_FUSE + 9*i]))</label><nail x="-232" y="-120"/><nail x="-360" y="-120"/></transition><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-176" y="-88">i : TxId</label><label kind="guard" x="-48" y="-16">can_send(me, bc[i])</label><label kind="assignment" x="-144" y="112">try_to_send(me, bc[i])</label><nail x="-56" y="-120"/><nail x="-56" y="104"/></transition></template><system>// Place template instantiations here.
BlockChainTA = BlockChain();
HelperTA = Helper();
AliceTA = P(parties[ALICE], A_KEY, 0, 9);
BobTA = P(parties[BOB],   B_KEY, 9, 0);
AdversarialAliceTA = Adversary(parties[ALICE]);
AdversarialBobTa = Adversary(parties[BOB]);

// List one or more processes to be composed into a system.
system AdversarialAliceTA, BobTA, BlockChainTA, HelperTA;</system></nta>
